import asyncio
import logging
import random
import sys

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import CONST
import inline_fix_text
import kb
import sqlite3
import link
import parsing

TOKEN = CONST.BOT_TOKEN
dp = Dispatcher(storage=MemoryStorage())
times_list = ['part_time', 'from_4_hours', 'in_evening', "on_weekends"]
specialization_list = ['security', 'service_personnel', 'information_technology', 'mass_media', 'medicine', 'workers',
                       'retail', 'fitness', 'not_decided']
industry_list = ['car', 'hotels', 'JKH', 'internet', 'medicine1', 'social', 'food', 'components', 'retail1', 'building',
                 'non-food', 'computers', 'non_decided']
experience_list = ['doesnt_matter', '0', '1-3', '3-6', '6+']
disability_list = ['yes', 'no']
region_list = ['moscow', 'moscow_region', 'petersburg', 'leningrad', 'sevastopol', 'krasnodar', 'tatarstan',
               'nizhny_novgorod', 'yaroslavl']


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT * FROM Users WHERE userid = ?', (message.from_user.id,))
    results = cursor.fetchall()

    connection.close()

    if not results:
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()

        cursor.execute('INSERT INTO Users '
                       '(userid, name, region, time, specialization, industry, experience, disability)'
                       ' VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                       (message.from_user.id, '-1', '-1', -1, -1, -1, -1, -1))
        connection.commit()
        connection.close()
        path = f'images/start/{random.randint(1, 3)}.png'
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=FSInputFile(path=path),
                             caption='<b>–ü—Ä–∏–≤–µ—Ç!</b> üöÄ \n\n–Ø <b>–ö–æ—Å–º–∏—à–∞</b>, –∏ –¥–∞, —è –ø—Ä–∏–ª–µ—Ç–µ–ª –∏–∑ –∫–æ—Å–º–æ—Å–∞, '
                                     '—á—Ç–æ–±—ã <b>–ø–æ–º–æ—á—å</b> —Ç–µ–±–µ —Å –ø–æ–∏—Å–∫–æ–º –∫–ª–∞—Å—Å–Ω–æ–π <b>–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏</b> üåå. '
                                     '–Ø —Ç—É—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ –ª—ë–≥–∫–∏–º –∏ –¥–∞–∂–µ –≤–µ—Å—ë–ª—ã–º! üòé'
                                     '–í–º–µ—Å—Ç–µ –º—ã –Ω–∞–π–¥—ë–º –≤–∞—Ä–∏–∞–Ω—Ç, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥(–ª–∞) –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –∏ '
                                     '–ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∂–∏–∑–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ üåü. –ö—Å—Ç–∞—Ç–∏, –∫–∞–∫ –∫ —Ç–µ–±–µ '
                                     '–æ–±—Ä–∞—â–∞—Ç—å—Å—è? \n\n<b>–ù–∞–ø–∏—à–∏</b> —Å–≤–æ—ë <b>–ò–ú–Ø –∏ –§–ê–ú–ò–õ–ò–Æ</b>, –∏ –º—ã —Å—Ä–∞–∑—É –Ω–∞—á–Ω–µ–º –Ω–∞—à '
                                     '–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∫ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ!', parse_mode='HTML')
    else:
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        cursor.execute(
            'UPDATE Users SET name = ?, region = ?, time = ?, specialization = ?, industry = ?, experience = ?, disability = ? WHERE userid = ?',
            ('-1', '-1', -1, -1, -1, -1, -1, message.from_user.id))
        connection.commit()
        connection.close()
        path = f'images/start/{random.randint(1, 3)}.png'
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=FSInputFile(path=path),
                             caption='<b>–ü—Ä–∏–≤–µ—Ç!</b> üöÄ \n\n–Ø <b>–ö–æ—Å–º–∏—à–∞</b>, –∏ –¥–∞, —è –ø—Ä–∏–ª–µ—Ç–µ–ª –∏–∑ –∫–æ—Å–º–æ—Å–∞, '
                                     '—á—Ç–æ–±—ã <b>–ø–æ–º–æ—á—å</b> —Ç–µ–±–µ —Å –ø–æ–∏—Å–∫–æ–º –∫–ª–∞—Å—Å–Ω–æ–π <b>–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏</b> üåå. '
                                     '–Ø —Ç—É—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ –ª—ë–≥–∫–∏–º –∏ –¥–∞–∂–µ –≤–µ—Å—ë–ª—ã–º! üòé'
                                     '–í–º–µ—Å—Ç–µ –º—ã –Ω–∞–π–¥—ë–º –≤–∞—Ä–∏–∞–Ω—Ç, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥(–ª–∞) –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –∏ '
                                     '–ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∂–∏–∑–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ üåü. –ö—Å—Ç–∞—Ç–∏, –∫–∞–∫ –∫ —Ç–µ–±–µ '
                                     '–æ–±—Ä–∞—â–∞—Ç—å—Å—è? \n\n<b>–ù–∞–ø–∏—à–∏</b> —Å–≤–æ—ë <b>–ò–ú–Ø –∏ –§–ê–ú–ò–õ–ò–Æ</b>, –∏ –º—ã —Å—Ä–∞–∑—É –Ω–∞—á–Ω–µ–º –Ω–∞—à '
                                     '–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∫ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ!', parse_mode='HTML')


@dp.message()
async def echo_handler(message: Message, state: FSMContext) -> None:
    try:
        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()
        cursor.execute('SELECT * FROM Users WHERE userid = ?', (message.from_user.id,))
        results = cursor.fetchall()
        cursor.execute('SELECT name FROM Users WHERE userid = ?', (message.from_user.id,))
        name = cursor.fetchone()
        connection.close()

        if results[0][2] == '-1':
            if len(message.text.split()) == 2 and len(message.text) < 60:
                connection = sqlite3.connect('users.db')
                cursor = connection.cursor()
                cursor.execute('UPDATE Users SET name = ? WHERE userid = ?', (message.text, message.from_user.id))
                connection.commit()
                connection.close()
                path = f'images/region/{random.randint(1, 3)}.png'
                msg = await bot.send_photo(chat_id=message.from_user.id,
                                           photo=FSInputFile(path=path),
                                           caption=f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}! üåü\n\n'
                                                   '–ß—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã '
                                                   '–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è, –Ω–∞–ø–æ–º–Ω–∏, <b>–≤ –∫–∞–∫–æ–º '
                                                   '–†–ï–ì–ò–û–ù–ï/–ì–û–†–û–î–ï —Ç—ã –∂–∏–≤—ë—à—å?</b>\n\nüåÜ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏, '
                                                   '–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –Ω–æ –∏ —É–¥–æ–±–Ω—ã –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.'
                                           , reply_markup=kb.region(), parse_mode='HTML')
                await state.update_data(chat_id=msg.chat.id)
                await state.update_data(message_id=msg.message_id)
            else:
                await message.answer('–£–∫–∞–∂–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é')
        else:
            await message.answer('–í—ã–ø–æ–ª–Ω–∏—Ç–µ —à–∞–≥ –≤—ã—à–µ!')
    except TypeError:
        await message.answer("Nice try!")


@dp.callback_query(lambda F: F.data in region_list)
async def region(callback: CallbackQuery, state: FSMContext):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('UPDATE Users SET region = ? WHERE userid = ?',
                   (callback.data, callback.from_user.id))
    connection.commit()
    cursor.execute('SELECT name FROM Users WHERE userid = ?', (callback.from_user.id,))
    name = cursor.fetchone()
    connection.close()
    path = f'images/time/{random.randint(1, 3)}.png'
    msg = await bot.send_photo(chat_id=callback.from_user.id,
                               photo=FSInputFile(path=path),
                               caption=f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, {name[0]}! üöÄ\n\n–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É, '
                                       '–∫–æ—Ç–æ—Ä–∞—è –∏–¥–µ–∞–ª—å–Ω–æ –≤–ø–∏—à–µ—Ç—Å—è –≤ —Ç–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ üå†. –í–µ–¥—å –∫—Ç–æ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–µ–ª—å–∑—è '
                                       '–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º, –∫–∞–∫ –∫–æ–º–µ—Ç–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ? \n\n'
                                       'üåå<b>–í—ã–±–µ—Ä–∏ –í–†–ï–ú–Ø, –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å</b>, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à '
                                       '–º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏!'
                               , reply_markup=kb.main(), parse_mode='HTML')
    data = await state.get_data()
    chat_id = data.get('chat_id')
    message_id = data.get('message_id')
    await callback.bot.edit_message_caption(chat_id=chat_id, message_id=message_id, reply_markup=None,
                                            caption=f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name[0]}! üåü\n\n'
                                                    '–ß—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã '
                                                    '–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è, –Ω–∞–ø–æ–º–Ω–∏, <b>–≤ –∫–∞–∫–æ–º '
                                                    '–†–ï–ì–ò–û–ù–ï/–ì–û–†–û–î–ï —Ç—ã –∂–∏–≤—ë—à—å?</b>\n\nüåÜ –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏, '
                                                    '–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –Ω–æ –∏ —É–¥–æ–±–Ω—ã –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.\n\n'
                                                    f'–¢—ã –≤—ã–±—Ä–∞–ª - <b>{inline_fix_text.region_kb_list[callback.data]}</b>')
    await state.update_data(chat_id=msg.chat.id)
    await state.update_data(message_id=msg.message_id)


@dp.callback_query(lambda F: F.data in times_list)
async def time(callback: CallbackQuery, state: FSMContext):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('UPDATE Users SET time = ? WHERE userid = ?',
                   (times_list.index(callback.data), callback.from_user.id))
    connection.commit()
    cursor.execute('SELECT name FROM Users WHERE userid = ?', (callback.from_user.id,))
    name = cursor.fetchone()
    connection.close()
    path = f'images/specialization/{random.randint(1, 3)}.png'
    msg = await bot.send_photo(chat_id=callback.from_user.id,
                               photo=FSInputFile(path=path),
                               caption=f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, {name[0]}! üåü\n\n–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Ç–æ–º—É, "
                                       "—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥, –Ω–æ –∏ —Ä–∞–¥–æ—Å—Ç—å! üòÑ\n\n"
                                       "<b>–í—ã–±–µ—Ä–∏</b> —Å–≤–æ—é <b>–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ</b>, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π "
                                       "–ø—É—Ç—å –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ! üåå", reply_markup=kb.specialization(),
                               parse_mode='HTML')
    data = await state.get_data()
    chat_id = data.get('chat_id')
    message_id = data.get('message_id')
    await callback.bot.edit_message_caption(chat_id=chat_id, message_id=message_id, reply_markup=None,
                                            caption=f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, {name[0]}! üöÄ\n\n–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É, '
                                                    '–∫–æ—Ç–æ—Ä–∞—è –∏–¥–µ–∞–ª—å–Ω–æ –≤–ø–∏—à–µ—Ç—Å—è –≤ —Ç–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ üå†. –í–µ–¥—å –∫—Ç–æ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–µ–ª—å–∑—è '
                                                    '–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º, –∫–∞–∫ –∫–æ–º–µ—Ç–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –∫–æ—Å–º–æ—Å–µ?\n\n'
                                                    'üåå<b>–í—ã–±–µ—Ä–∏ –í–†–ï–ú–Ø,–∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å</b>, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à '
                                                    '–º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏!\n\n'
                                                    f'–¢—ã –≤—ã–±—Ä–∞–ª - <b>{inline_fix_text.main_kb_list[callback.data]}</b>')
    await state.update_data(chat_id=msg.chat.id)
    await state.update_data(message_id=msg.message_id)


@dp.callback_query(lambda F: F.data in specialization_list)
async def specialization(callback: CallbackQuery, state: FSMContext):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('UPDATE Users SET specialization = ? WHERE userid = ?',
                   (specialization_list.index(callback.data), callback.from_user.id))
    connection.commit()
    cursor.execute('SELECT name FROM Users WHERE userid = ?', (callback.from_user.id,))
    name = cursor.fetchone()
    connection.close()
    path = f'images/industry/{random.randint(1, 3)}.png'
    msg = await bot.send_photo(chat_id=callback.from_user.id,
                               photo=FSInputFile(path=path),
                               caption=f"–•–æ—Ä–æ—à–æ, {name[0]}! üòé\n\n–¢—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å, —á–µ–≥–æ —Ö–æ—á–µ—à—å! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π "
                                       "–æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å <b>–û–¢–†–ê–°–õ–¨–Æ –∫–æ–º–ø–∞–Ω–∏–∏</b>, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å. "
                                       "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å—É–∑–∏—Ç—å –ø–æ–∏—Å–∫ –∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É! üåå\n\n"
                                       "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ—Ç—Ä–∞—Å–ª—å, –∏ –º—ã –±—É–¥–µ–º –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è —Ç–µ–±—è! üöÄ",
                               reply_markup=kb.industry(), parse_mode='HTML')
    data = await state.get_data()
    chat_id = data.get('chat_id')
    message_id = data.get('message_id')
    await callback.bot.edit_message_caption(chat_id=chat_id, message_id=message_id, reply_markup=None,
                                            caption=f"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, {name[0]}! üåü\n\n–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Ç–æ–º—É, "
                                                    "—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–æ—Ö–æ–¥, –Ω–æ –∏ —Ä–∞–¥–æ—Å—Ç—å! üòÑ \n"
                                                    "<b>–í—ã–±–µ—Ä–∏</b> —Å–≤–æ—é <b>–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ</b>, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π "
                                                    "–ø—É—Ç—å –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ! üåå\n\n"
                                                    f'–¢—ã –≤—ã–±—Ä–∞–ª - <b>{inline_fix_text.specialization_kb_list[callback.data]}</b>')
    await state.update_data(chat_id=msg.chat.id)
    await state.update_data(message_id=msg.message_id)


@dp.callback_query(lambda F: F.data in industry_list)
async def industry(callback: CallbackQuery, state: FSMContext):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('UPDATE Users SET industry = ? WHERE userid = ?',
                   (industry_list.index(callback.data), callback.from_user.id))
    connection.commit()
    cursor.execute('SELECT name FROM Users WHERE userid = ?', (callback.from_user.id,))
    name = cursor.fetchone()
    connection.close()
    path = f'images/experience/{random.randint(1, 3)}.png'
    msg = await bot.send_photo(chat_id=callback.from_user.id,
                               photo=FSInputFile(path=path),
                               caption=f"–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä, {name[0]}! üèÜ\n\n–¢—ã —É–∂–µ –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! "
                                       "–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —à–∞–≥–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è <b>–û–ü–´–¢ —Ä–∞–±–æ—Ç—ã</b> –≤ "
                                       "–¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ.\n\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ "
                                       "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–≤–æ–µ–º—É —É—Ä–æ–≤–Ω—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏! üåå‚ú®"
                                       "–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è! üöÄ",
                               reply_markup=kb.experience(), parse_mode='HTML')
    data = await state.get_data()
    chat_id = data.get('chat_id')
    message_id = data.get('message_id')
    await callback.bot.edit_message_caption(chat_id=chat_id, message_id=message_id, reply_markup=None,
                                            caption=f"–•–æ—Ä–æ—à–æ, {name[0]}! üòé\n\n–¢—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—à—å, —á–µ–≥–æ —Ö–æ—á–µ—à—å! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π "
                                                    "–æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å <b>–û–¢–†–ê–°–õ–¨–Æ –∫–æ–º–ø–∞–Ω–∏–∏</b>, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å. "
                                                    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å—É–∑–∏—Ç—å –ø–æ–∏—Å–∫ –∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É! üåå\n\n"
                                                    "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ—Ç—Ä–∞—Å–ª—å, –∏ –º—ã –±—É–¥–µ–º –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è —Ç–µ–±—è! üöÄ\n\n"
                                                    f'–¢—ã –≤—ã–±—Ä–∞–ª - <b>{inline_fix_text.industry_kb_list[callback.data]}</b>')
    await state.update_data(chat_id=msg.chat.id)
    await state.update_data(message_id=msg.message_id)


@dp.callback_query(lambda F: F.data in experience_list)
async def experience(callback: CallbackQuery, state: FSMContext):
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('UPDATE Users SET experience = ? WHERE userid = ?',
                   (experience_list.index(callback.data), callback.from_user.id))
    connection.commit()
    cursor.execute('SELECT name FROM Users WHERE userid = ?', (callback.from_user.id,))
    name = cursor.fetchone()
    connection.close()
    path = f'images/disability/{random.randint(1, 3)}.png'
    msg = await bot.send_photo(chat_id=callback.from_user.id,
                               photo=FSInputFile(path=path),
                               caption=f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, {name[0]}! üåà\n\n–ú—ã —É–∂–µ –±–ª–∏–∑–∫–∏ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ "
                                       "–¥–ª—è —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è! –£ –º–µ–Ω—è –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∫ —Ç–µ–±–µ. "
                                       "–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å, —è–≤–ª—è–µ—à—å—Å—è –ª–∏ —Ç—ã —á–µ–ª–æ–≤–µ–∫–æ–º —Å <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏</b>?\n\n"
                                       "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —É—á–µ—Å—Ç—å –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π. üíñ "
                                       "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π! üöÄ", reply_markup=kb.disability())
    data = await state.get_data()
    chat_id = data.get('chat_id')
    message_id = data.get('message_id')
    await callback.bot.edit_message_caption(chat_id=chat_id, message_id=message_id, reply_markup=None,
                                            caption=f"–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä, {name[0]}! üèÜ\n\n–¢—ã —É–∂–µ –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! "
                                                    "–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —à–∞–≥–æ–≤. –†–∞—Å—Å–∫–∞–∂–∏, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–±—è <b>–û–ü–´–¢ —Ä–∞–±–æ—Ç—ã</b> –≤ "
                                                    "–¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ.\n\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ "
                                                    "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–≤–æ–µ–º—É —É—Ä–æ–≤–Ω—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏! üåå‚ú®"
                                                    "–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è! üöÄ\n\n"
                                                    f'–¢—ã –≤—ã–±—Ä–∞–ª - <b>{inline_fix_text.experience_kb_list[callback.data]}</b>')
    await state.update_data(chat_id=msg.chat.id)
    await state.update_data(message_id=msg.message_id)


@dp.callback_query(lambda F: F.data in disability_list)
async def disability(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–û–¥–Ω—É –º–∏–Ω—É—Ç–∫—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ!')
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('UPDATE Users SET disability = ? WHERE userid = ?',
                   (disability_list.index(callback.data), callback.from_user.id))
    connection.commit()
    cursor.execute('SELECT name FROM Users WHERE userid = ?', (callback.from_user.id,))
    name = cursor.fetchone()
    connection.close()
    data = await state.get_data()
    chat_id = data.get('chat_id')
    message_id = data.get('message_id')
    await callback.bot.edit_message_caption(chat_id=chat_id, message_id=message_id, reply_markup=None,
                                            caption=f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, {name[0]}! üåà\n\n–ú—ã —É–∂–µ –±–ª–∏–∑–∫–∏ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ "
                                                    "–¥–ª—è —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è! –£ –º–µ–Ω—è –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∫ —Ç–µ–±–µ. "
                                                    "–ù–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å,  —è–≤–ª—è–µ—à—å—Å—è –ª–∏ —Ç—ã —á–µ–ª–æ–≤–µ–∫–æ–º —Å <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏</b>?\n\n"
                                                    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —É—á–µ—Å—Ç—å –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π. üíñ "
                                                    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!\n\n"
                                                    f'–¢—ã –≤—ã–±—Ä–∞–ª - <b>{inline_fix_text.disability_kb_list[callback.data]}</b>')
    link_vac = link.get_link(callback.from_user.id)
    print(link_vac)
    vacs = parsing.get_vacs(link_vac)
    if not vacs:
        await bot.send_message(chat_id=callback.from_user.id, text='–£–≤—ã, <b>–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –≤–∞—Å –Ω–µ –Ω–∞—à–ª–æ—Å—å</b>.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>–¥—Ä—É–≥—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–ª–∏ –æ—Ç—Ä–∞—Å–ª—å</b>, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start',
                               parse_mode='HTML')
    else:
        path = f'images/last_msg/{random.randint(1, 3)}.png'
        text = f'–û—Ç–ª–∏—á–Ω–æ, {name[0]}! üéâ\n\n–Ø –Ω–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö <b>–ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫</b>, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–¥–æ–π—Ç–∏. –í–æ—Ç —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞: \n'
        await bot.send_photo(chat_id=callback.from_user.id,
                             photo=FSInputFile(path=path),
                             caption=text, reply_markup=None, parse_mode='HTML')
        for i in range(len(vacs)):
            text = (f'<b>üíª –†–∞–±–æ—Ç–∞ {i + 1}:</b> {vacs[i][0]}\n'
                    f'<b>üìç –õ–æ–∫–∞—Ü–∏—è:</b> {vacs[i][4]}\n'
                    f'<b>üíµ –ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {vacs[i][1]}\n'
                    f'<b>‚≠êÔ∏è –û–ø—ã—Ç:</b> {vacs[i][2]}\n'
                    f'<b>üíº –†–∞–±–æ—Ç–∞–¥–∞—Ç–µ–ª—å:</b> {vacs[i][3]}.\n'
                    f'<b>üîó –°—Å—ã–ª–∫–∞:</b> <a href="{vacs[i][5]}">–ö–ª–∏–∫</a>\n')
            await bot.send_message(chat_id=callback.from_user.id, text=text, parse_mode='HTML')
        text = f'–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å <b>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã</b>, –≤–æ—Ç –æ–±—â–∏–π –ª–∏—Å—Ç –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫: <a href="{link_vac}">–ö–ª–∏–∫</a>\n\n–ê –µ—Å–ª–∏ —Ö–æ—á–µ—à—å <b>–Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞</b>, –Ω–∞–ø–∏—à–∏ /start'
        await bot.send_message(chat_id=callback.from_user.id, text=text, parse_mode='HTML')


async def main() -> None:
    await dp.start_polling(bot)


if __name__ == "__main__":
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Users (
    id INTEGER PRIMARY KEY,
    userid INTEGER,
    name TEXT,
    region TEXT,
    time INTEGER,
    specialization INTEGER,
    industry INTEGER,
    experience INTEGER,
    disability BOOL
    )
    ''')
    connection.commit()
    connection.close()

    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
